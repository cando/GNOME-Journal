/* libgdprivate-1.0.la.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gd", gir_namespace = "Gd", gir_version = "1.0", lower_case_cprefix = "gd_")]
namespace Gd {
	[CCode (cheader_filename = "gd-fullscreen-filter.h", type_id = "gd_fullscreen_filter_get_type ()")]
	public class FullscreenFilter : GLib.Object {
		[CCode (has_construct_function = false)]
		public FullscreenFilter ();
		public void start ();
		public void stop ();
		public signal void motion_event ();
	}
	[CCode (cheader_filename = "gd-main-icon-view.h", type_id = "gd_main_icon_view_get_type ()")]
	public class MainIconView : Gtk.IconView, Atk.Implementor, Gd.MainViewGeneric, Gtk.Buildable, Gtk.CellLayout, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MainIconView ();
	}
	[CCode (cheader_filename = "gd-main-list-view.h", type_id = "gd_main_list_view_get_type ()")]
	public class MainListView : Gtk.TreeView, Atk.Implementor, Gd.MainViewGeneric, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MainListView ();
		public void add_renderer (Gtk.CellRenderer renderer, owned Gtk.TreeCellDataFunc func);
	}
	[CCode (cheader_filename = "gd-main-toolbar.h", type_id = "gd_main_toolbar_get_type ()")]
	public class MainToolbar : Gtk.Toolbar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.ToolShell {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MainToolbar ();
		public Gd.MainToolbarMode get_mode ();
		public void set_back_visible (bool visible);
		public void set_labels (string? primary, string? detail);
		public void set_mode (Gd.MainToolbarMode mode);
		public signal void clear_request ();
		public signal void go_back_request ();
		public signal void selection_mode_request (bool object);
	}
	[CCode (cheader_filename = "gd-main-view.h", type_id = "gd_main_view_get_type ()")]
	public class MainView : Gtk.ScrolledWindow, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public MainView (Gd.MainViewType type);
		public unowned Gtk.Widget get_generic_view ();
		public unowned Gtk.TreeModel get_model ();
		public GLib.List<Gtk.TreePath> get_selection ();
		public Gd.MainViewType get_selection_mode ();
		public Gd.MainViewType get_view_type ();
		public void set_model (Gtk.TreeModel? model);
		public void set_selection_mode (bool selection_mode);
		public void set_view_type (Gd.MainViewType type);
		public Gtk.TreeModel model { get; set construct; }
		public bool selection_mode { get; set construct; }
		public int view_type { get; set; }
		public signal void item_activated (string object, Gtk.TreePath p0);
		public signal void selection_mode_request ();
		public signal void view_selection_changed ();
	}
	[CCode (cheader_filename = "gd-margin-container.h", type_id = "gd_margin_container_get_type ()")]
	public class MarginContainer : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		public MarginContainer ();
		[NoAccessorMethod]
		public int max_margin { get; set; }
		[NoAccessorMethod]
		public int min_margin { get; set; }
	}
	[CCode (cheader_filename = "gd-notification.h", type_id = "gd_notification_get_type ()")]
	public class Notification : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Notification ();
		public void dismiss ();
		public void set_show_close_button (bool show_close_button);
		public void set_timeout (int timeout_sec);
		[NoAccessorMethod]
		public bool show_close_button { get; set construct; }
		[NoAccessorMethod]
		public int timeout { get; set construct; }
		public virtual signal void dismissed ();
	}
	[CCode (cheader_filename = "gd-styled-text-renderer.h", type_id = "gd_styled_text_renderer_get_type ()")]
	public class StyledTextRenderer : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public StyledTextRenderer ();
		public void add_class (string @class);
		public void remove_class (string @class);
	}
	[CCode (cheader_filename = "gd-tagged-entry.h", type_id = "gd_tagged_entry_get_type ()")]
	public class TaggedEntry : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {
		[CCode (has_construct_function = false)]
		public TaggedEntry ();
		public bool add_tag (string id, string label);
		public bool remove_tag (string id);
		public bool set_tag_label (string tag_id, string label);
		public signal void tag_button_clicked (string object);
		public signal void tag_clicked (string object);
	}
	[CCode (cheader_filename = "gd-toggle-pixbuf-renderer.h", type_id = "gd_toggle_pixbuf_renderer_get_type ()")]
	public class TogglePixbufRenderer : Gtk.CellRendererPixbuf {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public TogglePixbufRenderer ();
		[NoAccessorMethod]
		public bool active { get; set; }
		[NoAccessorMethod]
		public bool toggle_visible { get; set; }
	}
	[CCode (cheader_filename = "gd-two-lines-renderer.h", type_id = "gd_two_lines_renderer_get_type ()")]
	public class TwoLinesRenderer : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public TwoLinesRenderer ();
		[NoAccessorMethod]
		public string line_two { owned get; set; }
		[NoAccessorMethod]
		public int text_lines { get; set; }
	}
	[CCode (cheader_filename = "gd-main-view-generic.h", type_id = "gd_main_view_generic_get_type ()")]
	public interface MainViewGeneric : Gtk.Widget {
		public abstract Gtk.TreePath get_path_at_pos (int x, int y);
		public abstract void scroll_to_path (Gtk.TreePath path);
		[NoWrapper]
		public abstract void selection_changed ();
		public abstract void set_model (Gtk.TreeModel? model);
		public abstract void set_selection_mode (bool selection_mode);
	}
	[CCode (cheader_filename = "gd-main-view.h", cprefix = "GD_MAIN_COLUMN_")]
	public enum MainColumns {
		URI,
		TITLE,
		ICON,
		DISPLAY_URI,
		TIME,
		SELECTED
	}
	[CCode (cheader_filename = "gd-main-toolbar.h", cprefix = "GD_MAIN_TOOLBAR_MODE_")]
	public enum MainToolbarMode {
		INVALID,
		OVERVIEW,
		SELECTION,
		PREVIEW
	}
	[CCode (cheader_filename = "gd-main-view.h", cprefix = "GD_MAIN_VIEW_")]
	public enum MainViewType {
		ICON,
		LIST
	}
	[CCode (cheader_filename = "gd-utils.h")]
	public static GLib.Icon create_collection_icon (int base_size, GLib.List<Gdk.Pixbuf> pixbufs);
	[CCode (cheader_filename = "gd-utils.h")]
	public static Gtk.ListStore create_item_store ();
	[CCode (cheader_filename = "gd-utils.h")]
	public static Gtk.ListStore create_list_store ();
	[CCode (cheader_filename = "gd-utils.h")]
	public static Gtk.ListStore create_organize_store ();
	[CCode (cheader_filename = "gd-utils.h")]
	public static GLib.Icon create_symbolic_icon (string name, int base_size);
	[CCode (cheader_filename = "gd-utils.h")]
	public static GLib.Variant create_variant_from_pixbuf (Gdk.Pixbuf pixbuf);
	[CCode (cheader_filename = "gd-utils.h")]
	public static Gdk.Pixbuf embed_image_in_frame (Gdk.Pixbuf source_image, string frame_image_path, Gtk.Border slice_width, Gtk.Border border_width);
	[CCode (cheader_filename = "gd-utils.h")]
	public static void entry_focus_hack (Gtk.Widget entry, Gdk.Device device);
	[CCode (cheader_filename = "gd-utils.h")]
	public static string filename_strip_extension (string filename_with_extension);
	[CCode (cheader_filename = "gd-utils.h")]
	public static string format_int_alternative_output (int intval);
	[CCode (cheader_filename = "gd-utils.h")]
	public static void gtk_tree_view_set_activate_on_single_click (Gtk.TreeView tree_view, bool should_activate);
	[CCode (cheader_filename = "gd-utils.h")]
	public static string iso8601_from_timestamp (int64 timestamp);
	[CCode (cheader_filename = "gd-utils.h")]
	public static void item_store_set (Gtk.ListStore store, Gtk.TreeIter iter, string id, string name, string heading_text);
	[CCode (cheader_filename = "gd-utils.h")]
	public static void organize_store_set (Gtk.ListStore store, Gtk.TreeIter iter, string id, string name, int state);
	[CCode (cheader_filename = "gd-utils.h")]
	public static async bool queue_thumbnail_job_for_file_async (GLib.File file);
	[CCode (cheader_filename = "gd-utils.h")]
	public static void store_set (Gtk.ListStore store, Gtk.TreeIter iter, string urn, string uri, string title, string author, Gdk.Pixbuf icon, long mtime);
	[CCode (cheader_filename = "gd-utils.h")]
	public static bool time_val_from_iso8601 (string? string, out GLib.TimeVal timeval);
}
